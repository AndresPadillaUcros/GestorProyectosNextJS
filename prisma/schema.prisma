// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_Rol {
  Estudiante
  Lider
  Administrador
}

enum Enum_EstadoUser {
  Pendiente
  Autorizado
  NoAutorizado
}

enum Enum_EstadoProyecto {
  Activo
  Inactivo
}

enum Enum_FaseProyecto {
  Iniciado
  Desarrollo
  Terminado
}

enum Enum_EstadoInscripcion {
  Aceptado
  Rechazado
  Pendiente
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String          @id @default(cuid())
  email              String?         @unique
  emailVerified      DateTime?
  name               String?
  apellido           String?
  image              String?
  identificacion     String?         @unique
  rol                Enum_Rol        @default(Estudiante)
  estado             Enum_EstadoUser @default(Pendiente)
  proyectosLiderados Proyecto[]
  avances            Avances[]
  inscripciones      Inscripcion[]
  accounts            Account[]
  sessions            Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Proyecto {
  id                   String                 @id @default(cuid())
  nombre               String
  presupuesto          String?
  fechaInicio          DateTime?
  fechaFin             DateTime?
  estado               Enum_EstadoProyecto    @default(Activo)
  fase                 Enum_FaseProyecto      @default(Iniciado)
  objetivoGeneral      String?
  lider                User                   @relation(fields: [UserId], references: [id])
  UserId               String
  avances              Avances[]
  inscripciones        Inscripcion[]
  objetivosEspecificos ObjetivosEspecificos[]
}

model ObjetivosEspecificos {
  id          String   @id @default(cuid())
  descripcion String
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])
  proyectoId  String
}

model Avances {
  id            String   @id @default(cuid())
  fecha         DateTime @default(now())
  descripcion   String
  observaciones String?
  proyecto      Proyecto @relation(fields: [proyectoId], references: [id])
  proyectoId    String
  creadoPor     User     @relation(fields: [UserId], references: [id])
  UserId        String
}

model Inscripcion {
  id           String                 @id @default(cuid())
  estado       Enum_EstadoInscripcion @default(Pendiente)
  fechaIngreso DateTime               @default(now())
  fechaEgreso  DateTime?
  proyecto     Proyecto               @relation(fields: [proyectoId], references: [id])
  proyectoId   String
  estudiante   User                   @relation(fields: [UserId], references: [id])
  UserId       String
}
